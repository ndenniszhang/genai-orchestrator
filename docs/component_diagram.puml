@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

AddRelTag("dashed", $lineStyle = DashedLine())
LAYOUT_WITH_LEGEND()

Container_Boundary(backend, "Agentic AI Backend") {
    Component(agent_controller, "Agent Controller", "Spring @RestController", "Handles user requests. Depends *only* on the AIOrchestrator interface.")
    Component(ai_orchestrator, "AIOrchestrator", "Java Interface", "Facade defining the service contract for all agentic implementations.")
    
    Rel(agent_controller, ai_orchestrator, "Uses")

    Boundary(impl, "AI Orchastrator Implimentations") {
        ' --- Implementation 1: Embabel ---
        package "Embabel Adapter (Profile: 'embabel')" {
            ' Embabel adapter talks to externals via its *own* logic
            Component(embabel_adapter, "EmbabelAgentAdapter", "Spring @Service (@Profile('embabel'))", "Implements the orchestrator using the Embabel framework.")
            Rel(embabel_adapter, ai_orchestrator, "Implements")
        }
        
        ' --- Implementation 2: Custom ---
        package "Custom Orchestrator Components (Profile: 'custom')" {
            Component(custom_orchestrator, "CustomAgentOrchestrator", "Spring @Service (@Profile('custom'))", "Implements the orchestrator using custom components.")
            Component(model_client, "Model Client", "Spring @Service", "Abstracts LLM communication.")
            Component(mcp_client_registry, "MCP Client Registry", "Spring @Service", "Discovers and manages MCP Clients.")
            Component(mcp_client_1, "MCP Client", "Java Class", "A client for a single MCP server. Instantiated by the Registry.")
            Component(mcp_client_2, "MCP Client", "Java Class", "A client for a single MCP server. Instantiated by the Registry.")
            Component(task_state_repository, "Task State Repository", "Spring @Repository", "Interface for state persistence.")
            
            Rel(custom_orchestrator, ai_orchestrator, "Implements")
            Rel(custom_orchestrator, model_client, "Uses")
            Rel(custom_orchestrator, mcp_client_registry, "Uses")
            Rel(mcp_client_registry, mcp_client_1, "Manages")
            Rel(mcp_client_registry, mcp_client_2, "Manages")
            Rel(custom_orchestrator, task_state_repository, "Uses")
        }
    }
}

' --- External Systems ---
Container(llm, "Large Language Model (LLM)", "Ollama Container / OpenAI API", "Provides reasoning capabilities.")
Container(mcp_server_1, "MCP Server", "External Service", "Exposes tools via Model Context Protocol. (Web Search)")
Container(mcp_server_2, "MCP Server", "External Service", "Exposes tools via Model Context Protocol. (Weather Info)")
ContainerDb(database, "NoSQL Database", "MongoDB / Redis", "Stores agent task state.")

' --- Interface abstracts all external dependencies ---
Rel(model_client, llm, "Abstracts reasoning from")
Rel(mcp_client_1, mcp_server_1, "Abstracts tool use from")
Rel(mcp_client_2, mcp_server_2, "Abstracts tool use from")
Rel(task_state_repository, database, "Abstracts state persistence to", $tags = "dashed")

@enduml