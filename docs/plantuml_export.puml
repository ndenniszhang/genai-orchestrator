@startuml C4 Component Diagram for Jarvis MVP
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()


' Define the Container Boundary for the Monolith
Container_Boundary(jarvis_monolith, "Jarvis (MVP) - Monolithic Spring Boot Application") {

    ' Define internal components
    Component(api_controller, "API Controller", "Spring REST Controller", "Receives user prompts via a REST API.")
    Component(orchestrator, "Agent Loop Orchestrator", "Spring Service", "The central component that manages the entire reasoning loop.")
    Component(mcp_assembler, "MCP Assembler", "Spring Component", "Builds the structured MCP payload.")
    Component(llm_client, "LLM Client", "Spring Component", "Makes HTTP calls to the external LLM API.")
    Component(tool_dispatcher, "Tool Dispatcher", "Spring Service", "Adapter that executes tool logic by calling external device APIs.")
    ComponentDb(tool_registry, "Tool Registry", "In-Memory or DB", "Provides the definitions of available tools.")

    ' Define internal relationships
    api_controller<-->orchestrator: "Invokes the agent loop with user prompt"
    orchestrator<-->mcp_assembler: "Request tool context"
    mcp_assembler<-->tool_registry: "Get tool definitions"
    orchestrator<-->llm_client: "Sends prompt and context for inference"
    orchestrator<-->tool_dispatcher:  "Invokes tools"
}

' Define Actors and External Systems
Person(user, "User", "A person making a request to Jarvis.")
System_Ext(llm_api, "External LLM API", "e.g., OpenAI, Google Gemini")
System_Ext(device_apis, "External Device APIs", "e.g., IoT APIs, Calendar APIs")

' Define external relationships
user<-->api_controller: "User prompt / LLM response"
tool_dispatcher<-->device_apis: "Tools use"
llm_client<-->llm_api: "Inference calls"

@enduml